# GitHUB Actions를 이용한 CI/CD 구성을 위한 YAML 파일



# workFlow의 이름
name: Android CI

# on : Workflow가 어떤 GitHub 이번트에 의해 트리거될 것인지를 정의
on:
  # main branch에 push가 발생하거나
  push:
    branches: [ "main" ]
  # pull_request가 생성될 때마다 Workflow가 실행
  pull_request:
    branches: [ "main" ]
# 일련의 작업들을 정의, 각 작업은 별도의 가상환경에서 독립적으로 실행된다.
jobs:
  # 유효한 gradle-wrapper을 사용하는지 검증 // 악성코드 및 안전하게 사용할 수 있는지
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action/@v1
  build:
    needs: validation
    # job이 실행되는 가상 환경의 운영체제를 정의
    runs-on: ubuntu-latest
    # 순차적으로 실행될 job의 실행 단계를 나열 -> 각 단계는 순차적으로 실행
    steps:
      # github 저장소의 코드를 checkout하기 위한 것
      # 이것은 github actions가 제공하는 액션으로, 작업이 실행되는 가상머신에 코드를 복사
      - uses: actions/checkout@v3

      # step 이름 설정
      - name: Set up JDK 17
        # java 환경을 설정하는 데 사용
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          # gradle을 로컬에 캐싱해두어 ci/cd 빌드 시간 단축
          cache: gradle
      # gradle Wrapper 파일에 실행 권한을 부여 이를 통해 gradlew를 사용하여 gradle 빌드를 실행
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # Gradle을 이용해 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build
  tests:
    needs: build
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
          cache: gradle
      - name: Run tests
        run: ./gradlew test
